// ---------- Generador y datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ---------- Usuarios / Sesiones ----------
model User {
  id           BigInt   @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  locale       String?  @default("es")
  theme        String?  @default("pastel")
  photoBase64  String?
  createdAt    DateTime @default(now())

  // Seguridad (opcional, para reset por pregunta)
  securityQuestion   String?
  securityAnswerHash String?

  // Relaciones app
  sessions Session[]
  items    Item[]
  goals    Goal[]
  posts    FeedPost[]
  likes    FeedLike[]    @relation("LikesByUser")
  comments FeedComment[] @relation("CommentsByUser")
  sentDMs  DM[]          @relation("sent")
  recvDMs  DM[]          @relation("recv")

  // Reset por token
  passwordResets PasswordReset[]

  // Precios aprendidos por usuario
  knownPrices     UserKnownPrice[]
  UserAchievement UserAchievement[]

  @@index([email])
}

model Session {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

// ---------- App: Lista / Amigos / Metas / Feed / DMs ----------
model Item {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  title     String
  qty       Int      @default(1)
  note      String?
  done      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, done, id])
}

model Friendship {
  id          BigInt   @id @default(autoincrement())
  userA       BigInt
  userB       BigInt
  status      String // "pending" | "accepted"
  requestedBy BigInt
  createdAt   DateTime @default(now())

  @@unique([userA, userB])
  @@index([status, requestedBy])
}

model Goal {
  id         BigInt    @id @default(autoincrement())
  userId     BigInt
  title      String
  targetDate DateTime?
  isPublic   Boolean   @default(false)
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isPublic])
}

model FeedPost {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  content   String
  createdAt DateTime @default(now())

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes    FeedLike[]    @relation("LikesForPost")
  comments FeedComment[] @relation("CommentsForPost")

  @@index([userId, id])
}

model FeedLike {
  id        BigInt   @id @default(autoincrement())
  postId    BigInt
  userId    BigInt
  createdAt DateTime @default(now())

  // Hacia el post
  post FeedPost @relation("LikesForPost", fields: [postId], references: [id], onDelete: Cascade)
  // Hacia el usuario
  user User     @relation("LikesByUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
}

model FeedComment {
  id        BigInt   @id @default(autoincrement())
  postId    BigInt
  userId    BigInt
  text      String
  createdAt DateTime @default(now())

  // Hacia el post
  post FeedPost @relation("CommentsForPost", fields: [postId], references: [id], onDelete: Cascade)
  // Hacia el usuario
  user User     @relation("CommentsByUser", fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model DM {
  id         BigInt   @id @default(autoincrement())
  senderId   BigInt
  receiverId BigInt
  text       String
  createdAt  DateTime @default(now())

  sender   User @relation("sent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("recv", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId, id])
}

// ---------- Reset por token ----------
model PasswordReset {
  token     String   @id
  userId    BigInt
  method    String // "qa" | "email"
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

// ---------- Precios / Tiendas / Productos ----------
model Store {
  id        BigInt   @id @default(autoincrement())
  name      String
  lat       Float
  lng       Float
  address   String?
  createdAt DateTime @default(now())

  prices      Price[]
  knownPrices UserKnownPrice[]

  @@index([name])
}

model Product {
  id        BigInt   @id @default(autoincrement())
  name      String
  barcode   String?  @unique
  createdAt DateTime @default(now())

  prices Price[]

  @@index([name])
}

model Price {
  id        BigInt   @id @default(autoincrement())
  productId BigInt
  storeId   BigInt
  price     Decimal  @db.Decimal(10, 2)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([productId, storeId])
  @@index([storeId])
}

// ---------- Mejor precio conocido por usuario ----------
model UserKnownPrice {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt
  name      String
  storeId   BigInt
  price     Decimal  @db.Decimal(10, 2)
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id])

  @@index([userId, name])
}

model Achievement {
  id          BigInt   @id @default(autoincrement())
  code        String   @unique
  title       String
  description String
  icon        String?
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            BigInt   @id @default(autoincrement())
  userId        BigInt
  achievementId BigInt
  achievedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}
