generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  language  String   @default("es")
  theme     String   @default("system")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items     ShoppingItem[]
  posts     FeedPost[]
  sent      Message[]   @relation("sentMessages")
  received  Message[]   @relation("receivedMessages")
  friendsA  Friendship[] @relation("A")
  friendsB  Friendship[] @relation("B")
}

model ShoppingItem {
  id        String   @id @default(cuid())
  userId    String
  title     String
  note      String?
  done      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FeedPost {
  id        String   @id @default(cuid())
  userId    String
  content   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
  id     String @id @default(cuid())
  aId    String
  bId    String
  since  DateTime @default(now())

  A      User   @relation("A", fields: [aId], references: [id], onDelete: Cascade)
  B      User   @relation("B", fields: [bId], references: [id], onDelete: Cascade)

  @@unique([aId, bId])
}

model Message {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  text      String
  createdAt DateTime @default(now())

  from      User     @relation("sentMessages", fields: [fromId], references: [id], onDelete: Cascade)
  to        User     @relation("receivedMessages", fields: [toId], references: [id], onDelete: Cascade)
}
